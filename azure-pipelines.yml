trigger:
  branches:
    include:
      - refs/heads/master
      - refs/tags/*

jobs:
  - job: test_wasm_bindgen
    displayName: "Run wasm-bindgen crate tests (unix)"
    steps:
      - template: ci/azure-install-rust.yml
      - template: ci/azure-install-node.yml
      - template: ci/azure-install-geckodriver.yml
      - template: ci/azure-install-sccache.yml
      - script: cargo test
        displayName: "Builds on native"
      - script: cargo test --target wasm32-unknown-unknown
        displayName: "Crate test suite"
      - script: WASM_BINDGEN_NO_DEBUG=1 cargo test --target wasm32-unknown-unknown
        displayName: "Crate test suite (no debug)"
      - script: NODE_ARGS=/dev/null WASM_BINDGEN_ANYREF=1 cargo test --target wasm32-unknown-unknown --test wasm
        displayName: "Anyref test suite builds"
      - script: cargo test --target wasm32-unknown-unknown --features serde-serialize
        displayName: "Crate test suite (with serde)"
      - script: cargo test --target wasm32-unknown-unknown -p no-std
        displayName: "Crate test suite (no_std)"
      - script: cargo test -p wasm-bindgen-futures
        displayName: "Futures test suite on native"
      - script: cargo test -p wasm-bindgen-futures --target wasm32-unknown-unknown
        displayName: "Futures test suite on wasm"

  - job: test_wasm_bindgen_windows
    displayName: "Run wasm-bindgen crate tests (Windows)"
    pool:
      vmImage: vs2017-win2016
    steps:
      - template: ci/azure-install-rust.yml
      - template: ci/azure-install-node.yml
      - template: ci/azure-install-geckodriver.yml
      - template: ci/azure-install-sccache.yml
      - script: cargo test --target wasm32-unknown-unknown
        displayName: "wasm-bindgen test suite"
        env:
          RUST_LOG: wasm_bindgen_test_runner
          GECKODRIVER_ARGS: --log trace
      - script: cargo test --target wasm32-unknown-unknown -p js-sys
        displayName: "js-sys test suite"
      - script: cargo test --target wasm32-unknown-unknown -p webidl-tests
        displayName: "webidl-tests test suite"
        env:
          WBINDGEN_I_PROMISE_JS_SYNTAX_WORKS_IN_NODE: 1
      - script: cargo build --manifest-path crates/web-sys/Cargo.toml --target wasm32-unknown-unknown --features "Node Window Document"
        displayName: "web-sys build"

  - job: test_wasm_bindgen_nightly
    displayName: "Run wasm-bindgen crate tests (nightly)"
    steps:
      - template: ci/azure-install-rust.yml
        parameters:
          toolchain: nightly
      - template: ci/azure-install-node.yml
      - template: ci/azure-install-sccache.yml
      - script: cargo test --target wasm32-unknown-unknown --features nightly --test wasm

  - job: test_cli
    displayName: "Run wasm-bindgen-cli crate tests"
    steps:
      - template: ci/azure-install-rust.yml
      - template: ci/azure-install-sccache.yml
      - script: rustup target add wasm32-unknown-unknown
        displayName: "install wasm target"
      - script: cargo test -p wasm-bindgen-cli-support
        displayName: "wasm-bindgen-cli-support tests"
      - script: cargo test -p wasm-bindgen-cli
        displayName: "wasm-bindgen-cli tests"

  - job: test_web_sys
    displayName: "Run web-sys crate tests"
    steps:
      - template: ci/azure-install-rust.yml
      - template: ci/azure-install-node.yml
      - template: ci/azure-install-geckodriver.yml
      - template: ci/azure-install-sccache.yml
      - script: cargo build --manifest-path crates/web-sys/Cargo.toml --target wasm32-unknown-unknown
      - script: cargo build --manifest-path crates/web-sys/Cargo.toml --target wasm32-unknown-unknown --features Node
      - script: cargo build --manifest-path crates/web-sys/Cargo.toml --target wasm32-unknown-unknown --features Element
      - script: cargo build --manifest-path crates/web-sys/Cargo.toml --target wasm32-unknown-unknown --features Window
      - script: cargo test --manifest-path crates/web-sys/Cargo.toml --target wasm32-unknown-unknown --all-features

  - job: test_js_sys
    displayName: "Run js-sys crate tests"
    steps:
      - template: ci/azure-install-rust.yml
      - template: ci/azure-install-node.yml
      - template: ci/azure-install-geckodriver.yml
      - template: ci/azure-install-sccache.yml
      - script: cargo test -p js-sys --target wasm32-unknown-unknown

  - job: test_webidl
    displayName: "Run wasm-bindgen-webidl crate tests"
    steps:
      - template: ci/azure-install-rust.yml
      - template: ci/azure-install-node.yml
      - template: ci/azure-install-sccache.yml
      - script: cargo test -p wasm-bindgen-webidl
      - script: cargo test -p webidl-tests --target wasm32-unknown-unknown
        env:
          WBINDGEN_I_PROMISE_JS_SYNTAX_WORKS_IN_NODE: 1

  - job: test_ui
    displayName: "Run UI tests"
    steps:
      - template: ci/azure-install-rust.yml
        parameters:
          toolchain: beta
      - template: ci/azure-install-node.yml
      - template: ci/azure-install-sccache.yml
      - script: cargo test -p ui-tests

  - job: test_wasm_interpreter
    displayName: "Run wasm-bindgen-wasm-interpreter tests"
    steps:
      - template: ci/azure-install-rust.yml
      - template: ci/azure-install-sccache.yml
      - script: |
          git clone https://github.com/WebAssembly/wabt
          mkdir -p wabt/build
          cd wabt/build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=off -DCMAKE_CXX_COMPILER_LAUNCHER=$RUSTC_WRAPPER
          cmake --build . -- -j$(nproc)
          echo "##vso[task.setvariable variable=PATH;]$PATH:$PWD"
      - script: cargo test -p wasm-bindgen-wasm-interpreter

  - job: test_typescript_output
    displayName: "Test TypeScript output of wasm-bindgen"
    steps:
      - template: ci/azure-install-rust.yml
      - template: ci/azure-install-sccache.yml
      - template: ci/azure-install-node.yml
      - script: cd crates/typescript-tests && ./run.sh

  - job: build_examples
    displayName: "Build almost all examples"
    steps:
      - template: ci/azure-install-rust.yml
      - template: ci/azure-install-sccache.yml
      - template: ci/azure-install-wasm-pack.yml
      - script: mv _package.json package.json && npm install && rm package.json
        displayName: "run npm install"
      - script: |
          for dir in `ls examples | grep -v README | grep -v asm.js | grep -v raytrace | grep -v without-a-bundler`; do
            (cd examples/$dir &&
            ln -fs ../../node_modules . &&
            npm run build -- --output-path $BUILD_ARTIFACTSTAGINGDIRECTORY/exbuild/$dir) || exit 1;
          done
        displayName: "build examples"
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: examples1
          targetPath: '$(Build.ArtifactStagingDirectory)'

  - job: build_raytrace
    displayName: "Build raytrace examples"
    steps:
      - template: ci/azure-install-rust.yml
        parameters:
          toolchain: nightly-2019-04-01
      - template: ci/azure-install-sccache.yml
      - script: rustup component add rust-src
        displayName: "install rust-src"
      - script: |
          set -e
          curl -L https://github.com/japaric/xargo/releases/download/v0.3.13/xargo-v0.3.13-x86_64-unknown-linux-musl.tar.gz | tar xzf -
          echo "##vso[task.setvariable variable=PATH;]$PATH:$PWD"
        displayName: "install xargo"
      - script: |
          set -e
          sed -i 's/python/#python/' examples/raytrace-parallel/build.sh
          (cd examples/raytrace-parallel && ./build.sh)
          cp examples/raytrace-parallel/*.{js,html,wasm} $BUILD_ARTIFACTSTAGINGDIRECTORY
        displayName: "build example"
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: examples2
          targetPath: '$(Build.ArtifactStagingDirectory)'

  - job: build_benchmarks
    displayName: "Build benchmarks"
    steps:
      - template: ci/azure-install-rust.yml
      - template: ci/azure-install-sccache.yml
      - template: ci/azure-install-wasm-pack.yml
      - script: wasm-pack build --target web benchmarks
        displayName: "build benchmarks"
      - script: rm -f benchmarks/pkg/.gitignore
        displayName: "remove stray gitignore"
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: benchmarks
          targetPath: benchmarks
